I like the sublimity package - it seems much less intrusive and doesn't show my ido-mode completions inside the minimap buffer.

https://github.com/zk-phi/sublimity

-- [http://kermit.epska.org/ kermit] 2013-05-10 20:12 UTC


----

sublimity now provides better support to minimap

-- Anonymous 2013-06-21 14:20 UTC


----

I found minimap very helpful - thanks. 
However, It is not working with R scripts (ess-mode). It works well with Lisp, perl ... 

Any hint on how to fix that ? it will be much appreciated.

K.

-- PK 2014-08-30 14:06 UTC


----

Does it work with the Evil mode?

-- Anonymous 2016-09-21 10:03 UTC


== Discussion (moved from article page) ==

Nice. I found two issues:

The movement of the very small cursor is visible in the minimap windows when the viewport is dragged with the mouse. The cursor should be hidden in that window with `cursor-type'.

The other thing is an interaction bug. When I finish dragging the viewport I get the following backtrace:

<pre>
Debugger entered--Lisp error: (error "The mark is not set now, so there is no region")
  call-interactively(copy-region-as-kill-nomark nil nil)
</pre>


I use pc-selection mode, copy-region-as-kill-nomark is a function in that package. pc-selection allows the user to copy text by simply selecting text and releasing the mouse button. Apparently, this feature clashes with viewport dragging. pc-selection mode should be deactivated in the minimap buffer, if it's possible.


[new]
Thanks, I think I fixed those two in the latest version.

[new]

I suggest hiding the vertical scrollbars in the minimap buffer. They are not really needed if the viewport can be dragged.

[new]

I agree. I added a new option for that. The default is to hide the scroll-bar.

[new]

You could create a new screenshot with the toolbars hidden. I assume it looks better too!

[new]

Done.

----

[new]

Some actions seem to steal the minimap window for their own output.  What about adding
<pre>
(set-window-dedicated-p nil t)
</pre>
in the mode setup to try and minimize that.

[new]

Added a new option for that. It defaults to 'nil' though, because dedicated windows tend to confuse users since they behave unexpectedly.

----

[new]

Really nice! How can you set up emacs so it creates a minimap for every buffer (or, for buffers of a certain type)? A problem I encounter is that when you create minimaps for 2 buffers, you get two minimap windows side-by-side. And so on. Could the minimap frame be reused when you switch buffer in a window? (On Carbon Emacs Fall 2008: Emacs 22.3.1) Thanks!

[new]

Well, that's in the TODO list. Currently, you can't really do that in Emacs without heaviliy using 'defadvice' on all the functions that switch or change buffers (thats what EmacsCodeBrowser does at the moment). There is some work going on to make this kind of fixed 'window grouping' possible in Emacs proper, so I rather just wait for that. At the moment, I'd suggest to bind 'minimap-create' to a key, then just maximize the buffer you're currently editing and use the key combination for 'minimap-create'. Existing minimaps which are currently hidden will then be reused.

----

It seems linum-mode displays line numbers at normal size and thus only displays the normal number of lines in the minimap, you should probably check for it and disable it in the minimap buffer.

[new]
Done. I also changed the overlay-syncing, so that only the 'face and 'invisible property will be synced - otherwise, linum-mode would still change the line spacing in the minimap buffer.

----

I find the following function handy, maybe it would make sense to add it to minimap.el?

<pre>
;;;###autoload
(defun minimap-toggle ()
  "Toggle minimap for current buffer."
  (interactive)
  (if (null minimap-bufname)
      (minimap-create)
    (minimap-kill)))
</pre>

Then I can bind single shortcut to minimap toggling, it's handy.

----

...and for those of us who like to keep the width of our frames at 80 columns...

<pre>
(defun minimap-toggle ()
  "Toggle minimap for current buffer."
  (interactive)
  (if (not (boundp 'minimap-bufname))
      (setf minimap-bufname nil))
  (if (null minimap-bufname)
      (progn (minimap-create)
	     (set-frame-width (selected-frame) 100))
    (progn (minimap-kill)
	   (set-frame-width (selected-frame) 80))))
</pre>

I have this set to <f7>... It is quite convenient since I don't have to resize my window each time.

----
I have updated minimap.el to use a single dedicated minimap sidebar window instead of new windows per buffer. Minimap now updates based on what the currently selected buffer is. You can find it here: https://github.com/dustinlacewell/emacs-minimap

Current bugs include semantic overlays disappearing when the current buffer changes.

----
And for this updated version... Here is the equivalent above function to keep buffer sizes to 80 wide...
<pre>
(defun minimap-toggle-retain-size ()
  "Toggle minimap"
  (interactive)
  (if (or (not (boundp 'minimap-exists))
	  (not minimap-exists))
      (progn (minimap-create)
	     (setf minimap-exists t)
	     (set-frame-width (selected-frame) 100))
    (progn (minimap-kill)
	   (setf minimap-exists nil)
	   (set-frame-width (selected-frame) 80))))
</pre>
----
Would it be possible to make the minimap buffer scroll-wheel enabled ? Currently using the scroll-wheel triggers a refresh which just makes the buffer glitch a bit. As a workaround, tips to (really) disable the scroll wheel would be welcome.

----
Some problems occurs when resizing the view (emacs 23.1.50.1 on Ubuntu 10.10).
M-x minimap-create
Drag to resize the windows to full screen, drag to make it 0 columns wide. Repeat.
Sometimes the minimap gets as wide as the buffer, sometimes it disappears.
Furthermore there is no way to change the width of the minimap alone. Hovering the mouse over its scrollbar changes the pointer to a double horizontal arrow and pops up "drag-mouse-1: resize", but dragging doesn't do anything.

----

It would be really good if the minimap would change automatically as you go through buffers.
The link posted by the other user has 2 issues:
- the minimap is always on the left
- it is buggy

----  

I am using Emacs in server environments where I do not have X11 available, so I use it in text terminal. Minimap shows fonts at same size as other buffers if used this way. Is it possible to solve this issue?  Yes, but not totally: [https://cloud.githubusercontent.com/assets/7250745/8083436/d4aaf9d4-0f84-11e5-9383-cb02bba384bc.png vim-minimap] uses drawille library to lower the size of the text in terminal.  Emacs' minimap could do the same: https://github.com/dengste/minimap/issues/12.

----

Note: I use the VHDL-Mode from http://www.iis.ee.ethz.ch/~zimmi/emacs/vhdl-mode.html. To enable the minimap mode here, I had to add the VHDL-Mode to the list of minimap major modes: (add-to-list 'minimap-major-modes 'vhdl-mode) Thanks for this great feature.
  


----

I try to use this with auctex, but it doesn’t seem to work. It works in my other buffers – so there seem to be a package conflict here.
