A '''[::recursive edit]''' is an Emacs command loop that was invoked from an
Emacs command loop.  It's like a separate Emacs session in some ways,
but it uses much of the same state -- for example, global-variable
values.

Because it is typically invoked from an Emacs [[command]], the most common
situation is that you enter a recursive edit to perform some arbitrary
editing during a temporary pause from that command, then you exit the
recursive edit and resume that command.

It's not that common, but you can even enter a recursive edit from a
recursive edit -- any number of levels.  The new recursive edit is one recursion-level deeper.

When you're in a recursive edit the [[minibuffer]] usually shows brackets ('''##[...]##''') around the modes information in the mode-line.  A level 2 recursive edit shows '''##[[...]]##''', level 3 shows '''##[[[...]]]##''', and so on.

The standard key to exit a recursive edit, popping up one level, is
`C-M-c' (command `exit-recursive-edit').  Standard key `##C-]##' (command
`abort-recursive-edit') pops through all intermediate levels, back up
to top level.

Some commands foresee that you might want to do some recursive editing
at some point during their execution, so they temporarily provide a
key, often `C-r', to invoke a recursive edit.

But you can also invoke a recursive edit on demand anytime using
function `recursive-edit'.  For example, you can use `##M-:
(recursive-edit)##' at top level.

Examples:

# If you use the EmacsLisp debugger (non-`nil' `debug-on-error' or
  functions such as `debug' and `debug-on-entry'), then when you enter the
  debugger you enter a recursive edit.  The recursive edit ends when you exit the debugger.

# When query-replacing some text (`##M-%##' or `##M-C-%##'), `C-r' enters a recursive edit.  

# While saving buffers with `C-x s', `C-r' enters a recursive edit with the current file in ViewMode.

# While querying with `C-x q' in a keyboard macro, `C-r' enters a recursive edit.

# While spell checking a buffer with `M-x ispell-buffer' or a word (or the active region) with `C-$', `C-r' enters a recursive edit.

A recursive minibuffer is a special kind of recursive edit.  It does
not show the bracket indication in the mode-line.  

Non-`nil' option `enable-recursive-minibuffers' means that when you
are in the minibuffer you can invoke a command that, itself, opens a
new minibuffer; that is, it opens a recursive minibuffer.  If you set this option to non-`nil' then it's usually a good idea to also set option `minibuffer-depth-indicate-mode' to non-`nil' - it shows you the current recursive-minibuffer level.

For example, while using `C-x C-f', if `enable-recursive-minibuffers'
is non-`nil then you can do `C-u M-! date -I' to invoke shell command
`date'.


Some commands are predefined to open a temporary recursive minibuffer,
regardless of the value of option `enable-recursive-minibuffers'.  And
standard minibuffer provides some keys that let you temporarily
use a recursive minibuffer to enter something.  For example, you can
use `M-s' (command `next-matching-history-element') in the minibuffer
to search the minibuffer history for an entry that matches a regexp
you type, and insert that entry.

See the Emacs manual, node [https://www.gnu.org/software/emacs/manual/html_node/emacs/Recursive-Edit.html Recursive_Edit], and the Elisp manual, node [https://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Editing.html Recursive_Editing], for more information.

----
CategoryCommands
CategoryEditing

