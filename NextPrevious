This page is about library '''<tt>[[next-prev.el]]</tt>''', which is about ''getting'', or ''moving to'', the next or previous
buffer '''position that satisfies some predicate'''.

It includes functions that get or move to the next or previous
##THING## of some kind, as defined by library '''<tt>[[thingatpt+.el]]</tt>''', which is required.
Library `##thingatpt+.el##' uses and enhances standard library
`##thingatpt.el##'.

The workhorse functions here are '''`np-next-where'''' and
'''`np-previous-where''''.  `np-next-where' returns the next (or the nth
next) buffer position after point (or after a given position)
where a given predicate is true -- or nil if there is no such
position.  `np-previous-where' does the same thing in the reverse
direction.

The main [[command]]s here are '''`np-to-next-where'''' and
'''`np-to-previous-where''''.  They move the cursor to positions
`np-next-where' and `np-previous-where', respectively.

When repeated, these conditional-motion commands reuse the same
predicate as the last time (it is the value of [[variable]]
`np-to-where-last'), but a [[prefix argument]] makes them prompt you for
the predicate to use.  The predicate you enter must accept at
least one argument, and its first argument must be a buffer
position (the position to test).

A typical use might check something about the character at (i.e.,
after) that position.

The thing-related functions are `np-next-thing' and
'''`np-previous-thing''''.  They just use `np-next-where' and
`np-previous-where' with a predicate that tests whether the
position is at the start of a given type of thing, where being at
the start also means that the previous buffer position is not on
the same thing (not just the same type of thing).  For instance,
if the thing type passed to `np-next-thing' is `list' then it
returns the position of the start of the next list (or nil, if
none).

The '''thing'''-related [[command]]s are '''`np-to-next-thing'''' and
'''`np-to-previous-thing''''.  They move the cursor to positions
`np-next-thing' and `np-previous-thing', respectively.

When repeated, these commands reuse the same thing
type as the last time (it is the value of [[variable]]
`np-to-thing-last'), but a [[prefix argument]] makes them prompt you for
the thing type to use.

You can bind any of the commands defined here to keys, of course.
But you can also easily define other commands that make use of
them, and bind those commands to keys.

For example:

{{{
(defun doc-face-p (position)
  "Return non-nil if char at POSITION has face `font-lock-doc-face'."
  (and (eq (get-text-property position 'face) 'font-lock-doc-face)
       (or (eq position (point-min))
           (not (eq (get-text-property (1- position) 'face)
                    'font-lock-doc-face)))))

(defun to-next-doc-face (n)
  "Move to next doc face.
With numeric prefix arg N, move to Nth next doc face."
  (interactive "p")
  (np-to-next-where #'doc-face-p nil '(font-lock-doc-face) n))
}}}

And because the predicate can accept additional args, besides the
position, you can use a predicate that accepts the face to look
for.

{{{
(defun face-p (position face)
  "Return non-nil if char at POSITION has FACE."
  (and (eq (get-text-property position 'face) face)
       (or (eq position (point-min))
           (not (eq (get-text-property (1- position) 'face)
                    face)))))

(defvar last-face nil "Last face used by `to-next-face'.")

(defun to-next-face (arg)
  "Move to next use of FACE.
With a plain prefix arg, prompt for FACE.
With numeric prefix arg N, move to Nth next FACE."
  (interactive "P")
  (if (or (consp arg)  (not last-face))
      (setq last-face  (read-face-name "Face: ")
            arg        1)
    (setq arg  (prefix-numeric-value arg)))
  (np-to-next-where #'face-p nil (list last-face) arg))
}}}

As an example of defining a next-thing command, this is how you
might define a command to move among sexps:

{{{
(defun to-next-sexp (n)
  "Go to next start of a sexp."
  (interactive "p")
  (np-to-next-thing 'sexp nil n))
}}}

Or among strings:

{{{
(defun to-next-string (n)
  "Go to next start of a string."
  (interactive "p")
  (np-to-next-thing 'string nil n))
}}}


----
CategoryEditing
