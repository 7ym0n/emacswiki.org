This page is for recording (or discussion) of current apparent '''[::Problems]''' with the EmacsWiki ''Web site''. The purpose is to point out problems to the site maintainers.

This page is ''not'' for questions or problems about Emacs -- see OpenQuestions for that.

'''Suggestions:''' If you have ''suggestions'' (not problems) for the Emacs Wiki (not Emacs), please contribute them at '''EmacsWikiSuggestions'''.

Note that this page is not about EmacsWikiMode.

'''Add your problem descriptions below this line''' (ie, newest on top, oldest on bottom)

== Text overflow in translated languages ==
The navigation menus on the left of the site overflow into the page content in some languages such as a Russian. This can probably be fixed with a minor change in css.
-- Thanks for your attention --
2017-04-25

[new]
Can we shorten the text? Perhaps just use ЕмаксЛиспа? Or Территория Е. Л.? -- Alex Schroeder

== Revisioning Problems ==

[:EditingGetsOldPageText]
=== editing does not get most recent version ===

I tried yet again to get emacs-w3m to work as described above.  I edited.  It didn't work.  I edited the page with Safari.  It worked.  Then I followed the instructions again in emacs-w3m.  The Safari edit did not show up in the compose edit box, even though the page did show it.  Therefore, the text that the user edits is not the same as the text that is shown.  Is this a cache issue?  Thanks.

[new]
I don't think I've ever run into this. Anybody else? -- AlexSchroeder

=== RecentChanges doesn't reflect recent changes ===

I just edited and saved a reply someone posted at DrewsElispLibraries. I refrefreshed RecentChanges (with rollbacks and minor changes included), but my edit does not appear. That wiki page is listed, but still at the time and user of the previous edit. However, after clicking List only major changes it was listed. I had previously cleared my cache, so I don't think that was the problem. I'm guessing it was a cache problem nevertheless, but thought I'd mention it, in case it's not. -- DrewAdams












== Markup/Generation Issues==

=== Need for canonical syntax for keyboard input ===

For example, on GetHelp, I count at least 4, slightly differing syntaxes used to markup keyboard input.

It would be helpful if there were one official syntax.

And it would be helpful if it rendered in HTML using ##<kbd></kbd>## tags, which tend to look distinct in current browsers.

[new]
What do you suggest we do?
Some regular expression to specify how to recognise the markup would be great. Perhaps simply highlight any sequence of ##(<[A-Z]>|\b[SMF]-(\S|f[0-9]))\b)## and don't rely on weird quotes?
– [[Alex Schroeder]]

[new]
I'd suggest a dedicated syntax for keyboard input, probably ##<kbd></kbd>##.  Simple, explicit, already an HTML tag.  No magic or edge cases.

[new:DrewAdams:2020-01-02 17:15 UTC]
This question has also been raised on [[https://emacs.meta.stackexchange.com/q/15/105|emacs.StackExchange]].

I disagree with a proposal to use something like ##<kbd>## for Emacs key sequences. (I [[https://emacs.meta.stackexchange.com/a/31/105|said the same thing]] in that emacs.SE thread.)

##<kbd>## (e.g. as rendered on Stack Exchange) is OK for indicating ''physical'' keyboard keys, such as `Alt', `Ctrl' (or `Control') and `Enter' (or `Return').

It is not great for indicating Emacs ''key sequences'', which are logical.

In the printed versions, the Emacs manuals make a similar distinction (physical vs logical keys).

We should generally use the same notation that Emacs itself uses for key sequences: `C-x'.

I say "we should generally use...", but more importantly, we should let people use whatever they prefer, as long as it gets the message across clearly.

[new]

I think the distinction between physical keys and logical key sequences isn't important enough, in the context of EmacsWiki, to discard the idea of using ##<kbd></kbd>## syntax in wiki pages, because there are very few instances of writing out a full key name (like `Control')--almost every case is a key sequence.  The benefit, of having a consistent syntax to represent input, would remain.  

As Alex has written in the MissionStatement, etc, EmacsWiki is not the Emacs manual, and it serves a different purpose, so it need not match the same standards, especially when doing so would have a significant drawback.

In this case, I think the drawback is indeed significant.  As someone who has used Emacs for years but not contributed to this wiki often, when I wanted to make some contributions recently, it was a chore to do something that ought to be very straightforward: look up the correct syntax to represent keyboard input.  Looking at, e.g. the source of GetHelp, as I mentioned, there were 4 different syntaxes used within the space of a few paragraphs, and it was not clear which one was correct or preferred.  Looking at TextFormattingRules, it was also not helpful at all (no hits searching for `keyboard' or `input').

From a reader's perspective, having several different syntaxes used to represent input makes it difficult to learn.  How is the reader to know if there is a meaningful distinction between these syntaxes?

* '''`##C-h C-h##`'''
* '''`C-h C-h''''
* `C-h C-h'
* '''##C-h C-h##'''

I can easily imagine a new user wondering if some of those quotes around the key sequences are also supposed to be input, because why else would they be displayed sometimes and not others?

And as a contributor, which syntax should I use?  Why are some so much more cumbersome to type?

Fundamentally, what is the point of *not* having a canonical syntax for this?  All it does it make the task harder for readers and contributors.  Marking up keyboard input/key sequences/whatever is a fundamental part of writing Emacs documentation, and there is currently far too much friction to doing so here.  Issues like this definitely deter potential contributors.  It's one of the reasons I've preferred publishing my own documentation, like [https://github.com/alphapapa/emacs-package-dev-handbook this], rather than contributing here.

So, FWIW, I request that a simple, consistent syntax be designated for marking up keyboard input, one that renders nicely and is easy to read and input as markup.  Whether it's ##<kbd></kbd>## or something else, what matters most is that there is one syntax that is designated as correct, documented clearly as such, and renders cleanly.  I can only speak for myself, but I will be much more interested in contributing here if this issue is solved.

[new]
Sounds reasonable to me. I see no harm in adding it: ##<kbd>C-x C-s</kbd>## → <kbd>C-x C-s</kbd>
– Alex Schroeder

=== tt does the Wrong Thing with Double-Quote Chars ===

This: ##<tt>"<2>"</tt>## gets rendered with two closing curly double-quotes, not with straight double-quotes: <tt>"<2>"</tt>.  But %%##"<2>"##%% renders correctly: ##"<2>"##.

[new]
Yeah, tt simply changes the font to teletype, it doesn't mean "code" and thus I think the result is correct.
##<code>"<2>"</code>## might do what you want: <code>"<2>"</code>.
– [[Alex Schroeder]]



=== Colon line prefix does not indent correctly ===

See [[UnicodeEncoding#ucs-cmds.el]].  No matter how many colons are used for the last paragraph, it does not indent more.  We should be able to have ##::## align more or less with ##**## etc.  This is a regression.  -- DrewAdams

[new]
I think the problem is that the HTML being generated right now is invalid: ##<dl class="quote"><dl class="quote"><dt /><dd>indent 2</dd></dl></dl>## -- I don't think this ever worked as you intended it to. Right now you need to use ##:## before you can use ##::##. -- AlexSchroeder

[new]
I'm pretty sure it used to work.  I guess you're saying that a workaround is to do this?

{{{
* A bullet entry

:  

:: Some text indented to be under the bullet.
}}}


That does seem to work.  (You need to put some spaces after the `:'.)

* A bullet entry

:  

:: Some text indented to be under the bullet.

I guess I'm OK with the workaround, though it indents too far and adds too much vertical whitespace.
You can remove this problem unless you want to keep it as a reminder to look for a better solution.

[new]
I guess if the following two don't line up exactly, we can use some CSS fix it:

* bullet
: indent

I'm assuming that the exact indentation is determined by the browser defaults.
On my iPad it looks as follows:

{{{
normal text

   • bullet
   indent
}}}

The variant you prefer would be this, correct?

{{{
normal text

 • bullet
   indent
}}}

-- Alex 



=== Can markup be used in headers? <code>I have failed to do so.</code> ===
Is this documented somewhere?

Use-case: putting a category-tag like <code>CategoryNeedsAttention</code> into a header, without actually invoking it.

Interestingly, the markup in this particular header renders properly in the TOC

[new]
Markup cannot be nested by default. Very few markup elements can in fact be nested. This is not document anywhere, I think.
Common sense stuff like list items and inline markup can be nested (bold list items, for example).
Emphasis markup using apostrophes is the online inline markup that can be nested: ##''italic '''bold''' and italic''## -> ''italic '''bold''' and italic''. -- AlexSchroeder

[new]
The irony being that markup in headers **is** rendered in the (javascript-built) TOC -- MichaelPaulukonis



=== Apostrophes etc. not prettified in links ==

* ##ain't -- it -- "nice"## => ain't -- it -- "nice"
* ##[EmacsWikiProblems ain't -- it -- "nice"]## => [EmacsWikiProblems ain't -- it -- "nice"]

The link text retains its crude ASCII formatting. -- VegardOye

== Server Issues ==

=== CGI Internal error: 400 Bad request (malformed multipart POST) ===

I just got this error when trying to save a page after some simple (trivial) editing.  No idea what caused it or what the problem is.  I then clicked the browser `Back' button and tried, successfully, to save again.  -- DrewAdams

[new]
Anybody else? I've never seen this before. -- AlexSchroeder

[new]
Just an FYI that this problem has not disappeared, even if it is less frequent. -- DrewAdams



== Client Issues ==

In some cases the server might actually be at fault - still makes sense to group them like this.

[:StalePagesServed]
=== Browser Cache Not Refreshed - Stale Pages Served ===

This might be the same problem as [[#EditingGetsOldPageText]], below, but since that speaks specifically about emacs-w3m, I'm not sure.

This problem started several months ago. The browser cache does not get refreshed when pages are edited and saved. This happens for different browsers.

This problem has bitten several people, and the only workaround seems to be to remember to manually force a cache refresh when, say, you are looking at the editable page. And even that doesn't work if you use the Download link.

This causes people to download the wrong version of a page (e.g. an Emacs Lisp library, using the Download link). And it causes people to accidentally overwrite a previous edit by someone else (since it doesn't appear in the editable text unless they refresh that text).

I know that some people have thought that the problem was that pages were not being locked properly for edits, so that two people editing at the same time could accidentally overwrite each other's edits. I don't know if that problem also exists, but I do know that this cache problem has caused people to think there is a locking problem for edits. The cache problem occurs however, even for an edit that is long after (days after) the last edit has been saved, so it is not a lock problem.

Thanks for looking into this. -- DrewAdams


[new:DrewAdams:2009-11-04 07:10 UTC]
This is still happening, but I still cannot give a recipe for why or when it happens -- it happens sometimes. It just happened now. In the same browser session, I updated page DoReMi and saved. Then opened that page again from the link at RecentChanges, using browser's Open Link in New Window. Then clicked Edit the page and got the old page source, before my edit and save. HTH -- DrewAdams


[new:DrewAdams:2010-02-04 01:35 UTC]
Some more info on this, in case it helps. I was just bitten by this again -- I had to redo a bunch of edits as a result. 

If you look at the revisions of BookmarkPlus between Revision 53 and Revision 58, you'll see that Revision 54 was a major edit, then 55 was a minor edit. Well, 55 did not use 54 as its starting point -- it used 53 instead. So I ended up doing 55, 56, 57, and 58, before I realized that the major edit for 54 had been undone (i.e. lost).

I used to think this problem had something to do with the browser cache, but now I'm thinking it has something to do with major and minor edits. HTH. -- DrewAdams


[new:DrewAdams:2010-03-22 17:24 UTC]
Dunno if this is strictly related to the browser cache problem that I've been assuming exists, but there is a fine example of losing page updates that just occurred. See the revisions of this very page, EmacsWikiProblems, today.

You'll see that this sequence of events took place:

# I updated the page to reply to SteveTaylor about the mistaken rollback: revision 608.
# VegardOye updated the page to add a new item: revision 609.

Vegard's update wiped out my previous update. -- DrewAdams

[new]
Hm, maybe this is unrelated. Possibly it just took him more than nine minutes to edit the page before he saved it? Perhaps diff3 will sometimes merge things and drop changes without marking them as a conflict? Or he used a raw client that interacts with the wiki text directly, didn't post back the last modification date, thus diff3 was unable to determine the ancestor for conflict resolution, and he ended up overwriting what you had done. I think the caching problem you reported earlier is something else (and much trickier, apparently). -- AlexSchroeder


== Missing table of contents ==

The table of contents is generated by Javascript. On some pages that haven't been edited in years, you can still find a table of contents that doesn't use Javascript, but as soon as such a page is edited, the table of contents will require Javascript. The old code worked most of the time, but at the same time it was very /brittle/ and required constant attention and compatibility cross-checking. I feel it's just not worth the effort. The DuckDuckGo search also uses JavaScript to quietly add //site:www.emacswiki.org// to the search terms. Without JavaScript, this will also look weird. -- AlexSchroeder

== Captcha problems ==
If javascript is disabled, the captcha used on EmacsWiki, is virtually impossible for normal humans to solve on the first, second, or tenth attempt.  reCaptcha might pretend to work without js, but it's too frustrating to bother.  You may as well just disable anonymous edits for non-js users (like those using Emacs, say).

[new:AlexSchroeder:2014-07-15 21:20 UTC]
I can offer two solutions: 1. if you are using a browser that stores cookies, you can provide a "secret" URL parameter that tells Emacs Wiki that you have already answered the CAPTCHA: ##uihnscuskc=1##. 2. Switch to one of the Oddmuse modes listed on CategoryOddmuse. I recommend OddmuseCurl because that's what I use. It also serves as an example of how to use the wiki using ##curl##.

== Gists, Portraits ==
[new:wi24rd:2019-01-26 08:00 UTC]
https://www.emacswiki.org/emacs?action=browse;diff=1;id=Gists
https://www.emacswiki.org/emacs?action=browse;diff=1;id=UsingPortraits

[new]
Yeah. Thanks for the heads up. I fixed Gists. The server now fetches them and includes them in the HTML (slowing things down). I don't think the server should fetch and cache portraits from elsewhere, though. So I think I'm just going to remove that functionality. Right now I feel that all that we need to keep is the ##[new]## element, what do you think? -- [[Alex Schroeder]]

----
CategoryEmacsWikiSite
