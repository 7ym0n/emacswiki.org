== PATTERN or SEPARATORS at the end of the STRING ==

As of Emacs 22.1, `split-string' includes empty substrings only if the SEPARATORS argument is non-nil.

As of Emacs 24.4, you can pass a non-nil TRIM argument to remove whitespace or other uninteresting characters from the beginning/end of the string.

XEmacs always returns empty substrings if SEPARATORS matches at the end or beginning of string.  You can `delete' empty strings from the result list.

Therefore in Emacs:

    (split-string "a b ")
    => ("a" "b")
    (split-string "a b " split-string-default-separators)
    => ("a" "b" "")

And in XEmacs:

    (split-string "a b ")
    => ("a" "b" "")

If you do not expect any empty strings in the first place, a cheap
workaround might be to use `delete'.  This returns the same in both
Emacs and XEmacs, but it is more wasteful.

    (delete "" (split-string "a b "))
    => ("a" "b")

See [https://web.archive.org/web/20060502032400/http://list-archive.xemacs.org/xemacs-design/200304/msg00096.html XEmacs list archive]
and [https://lists.gnu.org/archive/html/emacs-devel/2003-04/msg00472.html GNU Emacs list archive] ([https://lists.gnu.org/archive/html/emacs-devel/2003-05/msg00428.html continued here])
for some discussion of these features.

== The Empty String as PATTERN or SEPARATORS ==

In Emacs 22.1+ and XEmacs, using the empty string, "", as your PATTERN or SEPARATOR produce empty strings at the beginning and end:

    (split-string "foo bar baz" "")
    => ("" "f" "o" "o" " " "b" "a" "r" " " "b" "a" "z" "")

You can remove those using the techniques listed above, but see next subsection for a more straightforward to do this.

=== Breaking strings into characters ===

    (append "look no hands" nil)
    => (108 111 111 107 32 110 111 32 104 97 110 100 115)
    (string-to-list "look no hands") ; Clearer name
    => (108 111 111 107 32 110 111 32 104 97 110 100 115)

    (mapcar 'char-to-string "look no hands") ; mapcar works on *sequences*, so there is no need to convert first.
    => ("l" "o" "o" "k" " " "n" "o" " " "h" "a" "n" "d" "s")
   
    (concat (reverse (string-to-list "look no hands")))
    => "sdnah on kool"

    (global-set-key
     (read-kbd-macro
      (concat (reverse (string-to-list "E-M-A-C-S"))))
     'all-hail-emacs)

== Match Data ==

`split-string' overwrites match-data, therefore if you need to use the match-data, be careful to wrap with `save-match-data' or use the match-data before calling `split-string'.

For example, instead of

    (while (re-search-forward re nil t)
      (push (nconc (split-string (match-string 1)) (split-string (match-string 2)))
            collections))

Use:

   (while (re-search-forward re nil t)
      (let ((s1 (match-string 1))
            (s2 (match-string 2)))
        (push (nconc (split-string s2) (split-string s1)) collections)))

----
ComparativeEmacsology
CategoryCode
