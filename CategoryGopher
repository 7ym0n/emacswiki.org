Gopher is a plain-text based network protocol which was widely popular before the HTTP-based web came into existance; de facto, it is the direct predecessor of modern HTTP servers, but with a simpler screen layout due to its simpler markup standard.  It supports informational text and hyperlinks as well as up- and download of files of several types, search queries, scripting, and a few other things.  Like HTTP, it is a server-client protocol; there are several dozen gopher clients for almost all platforms of different ability and quality.
  Gopher works similar to the `finger` protocol, but on port 70; instead of a regular gopher client, you can use telnet to connect and send a "selector" and a newline, and the server sends back some text. Done.

Gopher also came with the idea of special "maps". These are files alike to an index.html which basically are combined explanatory text files and directory indices.

For more information, see http://gopher.floodgap.com (or gopher://gopher.floodgap.com) and gopher://gopherproject.org.

== implementations in Emacs Lisp ==

Emacs has at least two Gopher client implementations:

* [https://github.com/msnyder-info/gopher.el gopher.el]
* [https://thelambdalab.xyz/elpher/ Elpher Gopher Client]

And some customization examples:

* [[Up command for Elpher]]

== Recommendations ==

[new]
I recommend Elpher. -- [[Alex Schroeder]]

[new]
Both of them are merely rudimentary implementations which do only support very limited subsets of Gopher link types.  Yet, Elpher is the better one — technically, ie., seen from lisp coding standards.  But gopher.el is much faster and more easily extendable to add the missing link types (and the type hints in the buffer display), yet misses customization options.  Elpher takes several seconds or longer to retrieve a single item, which ought to take place within tenths of a second.
  —mangledmind
