This page is about library '''<tt>[[zones.el]]</tt>''', which lets you easily define and subsequently act on multiple zones of buffer text --- in effect, multiple [[region]]s.

You can think of this as enlarging
the notion of ''region''.  In effect, it can remove the requirement
of target text being a contiguous sequence of characters.  A set
of buffer zones is, in effect, a (typically) noncontiguous
"region" of text.


A '''zone''' records two buffer positions and an optional list of additional information (whatever you like).  Each buffer position can be a marker, which means that a list of zones can specify zones in different buffers.

A position can also be a ''readable marker'', which is a Lisp sexp that can be written to disk (e.g., as part of a bookmark or saved variable), and restored in a later Emacs session by reading the file where it is saved.

(Commands that use zones typically act on ''izones'', which are just zones that are labeled with a numeric identifier.)

Emacs [[overlay]]s have a lot in common with zones: overlays have an
associated buffer, two limits (positions), and a list of
properties.  You can create zones from overlays, and vice versa.  You can also unite (coalesce) overlays or zones that overlap or are adjacent.

When creating zones from overlays, the overlay property list becomes the ##EXTRA## information
of the resulting zone: ##(LIMIT1 LIMIT2 . EXTRA)##.
When creating overlays from zones, any list of ##EXTRA## zone
information is used as the property list of the resulting overlay.





You can do the following with a list of zones:

* Sort them.
* Unite (coalesce) adjacent or overlapping zones (which includes sorting them).
* Intersect them.
* [[Narrowing|Narrow]] the buffer to zones in the list - see '''MultipleNarrowings'''.
* Select zones in the list as the active [[region]].  Cycle among regions.
* Search them (they are automatically united first).  For this
you need library <tt>[[isearch-prop.el]]</tt> (see [[Isearch+]]).
* Highlight and unhighlight them.  (For this you need the [[HighlightLibrary|Highlight]] library (<tt>[[highlight.el]]</tt>) or library <tt>[[facemenu+.el]]</tt>.
* Add the active [[region]] to a list of zones.
* Add the region to a list of zones, and then unite (coalesce) the
zones.
* Delete a zone from a list of zones.
* Clone a zones variable to another one, so the clone has the same
zones.
* Clone a zones variable and then unite the zones of the clone.
* Make a list-of-zones variable persistent, in a bookmark.  Use the
bookmark to restore it in a subsequent Emacs session.  For this
you need library [[Bookmark+]].

* Query-replace over them (Emacs 25 and later).






[:zz-add-zone]
[:zz-add-zone-and-unite]
[:zz-clone-zones]
[:zz-clone-and-unite-zones]
[:narrow-to-defun]
[:zz-izone-delete]
[:hlt-highlight-regions]
[:hlt-highlight-regions-in-buffers]
[:narrow-to-region]
[:narrow-to-page]
[:zz-select-region-repeat]
[:zz-unite-zones]
[:zz-set-izones-var]
[:widen]
[:zz-narrow-repeat]
Many of the commands that manipulate zones are bound on keymap '''`narrow-map''''.  They are available on prefix key '''`C-x n'''', along with the narrowing/widening keys `C-x n d', `C-x n n', `C-x n p', and `C-x n w':


* '''`C-x n a''''   (`zz-add-zone') -- Add the active [[region]] to the current list of zones.
* '''`C-x n A''''   (`zz-add-zone-and-unite') -- Add the region to the current list of zones, and then unite (coalesce) them.
* '''`C-x n c''''   (`zz-clone-zones')  -- Clone a zones variable to another one, so the clone has the same zones.
* '''`C-x n C''''   (`zz-clone-and-unite-zones') -- Clone to a variable and then unite its zones.
* '''`C-x n d''''   (`narrow-to-defun') -- Standard, except that it is advised to update the current list of zones with the narrowing.
* '''`C-x n C-d'''' (`zz-izone-delete') -- Delete a zone from the current list of zones.
* '''`C-x n h''''   (`hlt-highlight-regions') -- Highlight zones in the current buffer.
* '''`C-x n H''''   (`hlt-highlight-regions-in-buffers') -- Highlight zones in multiple buffers.
* '''`C-x n n''''   (`narrow-to-region') -- Standard, except that it is advised to update the current list of zones with the narrowing.
* '''`C-x n p''''   (`narrow-to-page') (standard, except that it is advised to update the current list of zones with the narrowing)
* '''`C-x n r''''   (`zz-select-region-repeat') -- Cycle zones as the active [[region]]: '''`##C-x n r r r ...##''''
* '''`C-x n u''''   (`zz-unite-zones') -- Unite (coalesce) the zones in the current list.
* '''`C-x n v''''   (`zz-set-izones-var') -- Make another zones variable current.
* '''`C-x n w''''   (`widen') -- Standard.
* '''`C-x n x''''   (`zz-narrow-repeat') -- Cycle zones as buffer [[Narrowing|narrowings]]: '''`##C-x n x x x ...##''''


The above descriptions speak of the "current list" of zones.  You can have any number of variables whose value is a list of zones, and you can switch among them.  The variables can be buffer-local or global (e.g., with positions recorded from multiple buffers).

Most zone commands let you use a [[prefix argument]] to be prompted for a different zones variable to use from the current one (the value of variable `zz-izones-var').  The use can be just for the current command (e.g., add a zone to the list of zones in a particular variable). Or it can be also for subsequent zone commands, by making the variable you entered the current one (setting `zz-izones-var' to it).



----

If you use library [[Icicles]] then you can use commands `icicle-select-zone', to select a zone as the [[region]], and `icicle-buffer-narrowing', to choose a [[Narrowing|narrowing]] (buffer restriction) and apply it.  They let you cycle zones, like 
`zz-select-region-repeat' and `zz-narrow-repeat', but you can, in addition, pick zones by name (composed of the zone limits and a zone-text prefix) using completion.  The candidate zones can be from multiple [[buffer]]s.

----

(Library <tt>[[zones.el]]</tt> supersedes library <tt>[[wide-n.el]]</tt>, which is obsolete as of 2015-08-16.)



----
CategoryRegion
MultipleModes
MultipleNarrowings
