= Description =

'''emacs-w3m''', also known on this wiki as [::WThreeM],
is an emacs internet browser and interface to
the [[w3m]] text browser.  It supports tabs (ie. multiple buffers), images, https, cookies, history, bookmarks, asynchronous operation, session management, a form of "filtering" similar to firefox's greasemonkey, and more.  Note that it has nothing to do
with the [[w3]] or the [[eww]] web browsers written entirely in EmacsLisp.  Using
the Emacs interface to w3m is much faster than using w3, since the
parsing and displaying is done by the external w3m process.

Though you can download emacs-w3m from its homepage at
http://emacs-w3m.namazu.org, please note that the official releases are extremely old. 
It is best to download the CVS version from the homepage, or from an un-official third-party mirror such as exist on MELPA or github (https://github.com/ecbrown/emacs-w3m).

There are English and Japanese language mailing-lists.  Their archives are
available at the website.  The lists are also archived and gatewayed on
Gmane, as <code>gmane.emacs.w3m</code>.  Emacs-w3m comes with a manual
in TexInfo format, from which a normal, comfortable section of the manual in
InfoMode form will be built by the installation process.

[new:PhilHudson:2013-03-24 12:10 UTC]
If you are building from cvs, be aware of one gotcha: if the first ##emacs## executable in your ##$PATH## is a symlink, then the directory containing that symlink will be used as the base install location by ##make install##. Fix: either change ##$PATH## to expose the actual installed ##emacs## binary first, at least for the duration of the configure/make/install procedure, or hand-edit the ##Makefile## created by running ##./configure##.


== Basic Setup ==

 (setq browse-url-browser-function 'w3m-browse-url)
 (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
 ;; optional keyboard short-cut
 (global-set-key "\C-xm" 'browse-url-at-point)

=== GUI Desktop Integration ===

If your GUI desktop complies with the freedesktop standard, you can have
all your GUI programs open links in emacs-w3m instead of, say, firefox or chrome.
Most linux desktops are compliant (eg. gnome, kde, xfce, lxde)

1. Create a file <code>emacs-w3m.desktop</code>. Here's an example:
{{{
[Desktop Entry]
Name=emacs-w3m
GenericName=Emacs Web Browser
X-GNOME-FullName=Emacs w3m Web Browser

Encoding=UTF-8
Version=1.0
Comment=Using emacsclient
NoDisplay=true

Exec=emacsclient --eval "(browse-url (replace-regexp-in-string \"'\" \"\" \"%u\"))"

Terminal=false
X-MultipleArgs=false
Type=Application
Icon=firefox-esr
Categories=Network;WebBrowser;
StartupWMClass=Firefox-esr
StartupNotify=true
MimeType=x-scheme-handler/unknown;x-scheme-handler/about;text/html;text/xml;application/xhtml+xml;application/xml;application/vnd.mozilla.xul+xml;application/rss+xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;
}}}

2. Save your <code>emacs-w3m.desktop</code> file in an appropriate place. If you want the change to be applied system-wide for all users, that would be <code>/usr/local/share/application/</code>. For a single user, the correct location would be <code>~/.local/share/applications</code>.

3. run <code>xdg-settings set default-web-browser emacs-w3m.desktop</code>.


= Other WThreeM pages =

* WThreeMHintsAndTips - Useful extensions and tips for using w3m
* WThreeMReportedProblems - Reported problems and their solutions
* WThreeMEditingWikis - using '''w3m''' to view and edit wikis
* WThreeMFrames - rendering frames
* WThreeMKeymap - alternate keymaps (including some "hidden" commands)
* WThreeMMailmanAdmin - using '''w3m''' to handle GNU Mailman admin approval queues
* WThreeMSearch - improving searching
* WThreeMTables - displaying tables correctly
* WThreeMTabs - managing multiple WThreeM buffers
* WThreeMTypeAhead - type ahead support
* WThreeMShimbun - use w3m to create mail backend
* WThreeMAuthentication - issues with http auth
* WThreeMDelicious - using w3m with http://del.icio.us/
* WThreeMSession - persistent tabbed browsing with w3m
* WThreeMReadability - improving readability
* WThreeMYoutube - View youtube video from emacs-w3m
* WThreeMEmacsTwentyThree - Issues specific to emacs version 23

== Middle click to open url in a new sesstion (tab) ==
I try to use:

    (define-key w3m-mode-map [mouse-2] 'w3m-mouse-view-this-url-new-session)

But it also changes the action of mouse-1. Ideas?


= Copy html links to org-mode =

You can copy a selection of text, including html links, from an emacs-w3m buffer into an org-mode buffer and have the html links automatically converted into org-mode links, so you don't lose the url information.

Function `org-w3m-copy-for-org-mode' is bound by default to "C-c C-x M-w" in emacs-w3m buffers for this purpose.


== Bookmarking ==

In addition to emacs-w3m native support for bookmarking, the following external extensions are available:

* [[Anything]] -- `M-x anything-w3m-bookmarks', narrow the list by typing some patterns(multiple patterns are space-delimited string),
select with up/down/pgup/pgdown/C-p/C-n/C-v/M-v, choose with enter,
With `TAB' actions can be selected if the selected bookmark has more than one possible action.
With `C-z' the contents of bookmark is displayed without quitting anything session.


* Regular Emacs bookmarks to URLs, for W3M.
** [[Bookmark+]]
** BookmarkExtension

=== Bookmark to delicious ===

The following uses `curl' and Lisp:anything-delicious.el (see `auth-source' to configure).

<pre>
        (defun w3m-add-delicious-bookmark (description tag)
          "Add a bookmark to delicious from w3m"
          (interactive (list (read-from-minibuffer "Description: "
                                                   nil nil nil nil
                                                   w3m-current-title)
                             (completing-read "Tag: "
                                              (anything-delicious-get-all-tags-from-cache))))
          (setq description
                (replace-regexp-in-string " " "+" description))
          (let* ((url     w3m-current-url)
                 (url-api (format anything-c-delicious-api-url-add
                                  url
                                  description
                                  tag))
                 anything-delicious-user
                 anything-delicious-password
                 auth)
            (unless (and anything-delicious-user anything-delicious-password)
              (anything-delicious-authentify))
            (setq auth (concat anything-delicious-user ":" anything-delicious-password))
            (with-temp-buffer
              (apply #'call-process "curl" nil t nil
                     `("-u"
                       ,auth
                       ,url-api))
              (buffer-string)
              (goto-char (point-min))
              (if (re-search-forward "<result code=\"done\" />" nil t)
                  (unwind-protect
                       (progn
                         (message "%s added to delicious" description)
                         (when current-prefix-arg
                           (w3m-bookmark-write-file url
                                                    (replace-regexp-in-string "\+"
                                                                              " "
                                                                              description)
                                                    tag)
                           (message "%s added to delicious and to w3m-bookmarks" description)))
                    (anything-wget-retrieve-delicious))
                  (message "Fail to add bookmark to delicious")
                  (when current-prefix-arg
                    (if (y-or-n-p "Add anyway to w3m-bookmarks?")
                        (progn
                          (w3m-bookmark-write-file url
                                                   (replace-regexp-in-string "\+" " "
                                                                             description)
                                                   tag)
                          (message "%s added to w3m-bookmarks" description))))))))

        (define-key w3m-mode-map "\C-x\C-a" 'w3m-add-delicious-bookmark)
</pre>

-- ThierryVolpiatto

:: Not as simple now that OAuth is used; compare  http://delicious.com/help/api and http://delicious.com/help/oauthapi  --[[jcorneli]]

::: Don't know what is OAuth, i will have a look. However the actual above code of Lisp:anything-delicious.el work fine.
I have updated it. -- ThierryVolpiatto

==Browse url on other window==
add this into the configuraion file of the emacs, it would make the emacs work as *help* buffer. This would help if you use w3m to check document
<pre>
(setq browse-url-browser-function 'w3m-browse-url-other-window)

(defun w3m-browse-url-other-window (url &optional newwin)
  (let ((w3m-pop-up-windows t))
    (if (one-window-p) (split-window))
    (other-window 1)
    (w3m-browse-url url newwin)))
</pre>

DennyZhang:
Please note, emacs23 has the functions of ffap-other-window/ffap-other-frame.
If you always browse url in w3m, I think these functions are good enough.

However, I usually leverage external web browser, and sometimes I may use w3m for some simple web pages.

So my variable of browse-url-browser-function is not set as w3m way.
Thus, I define below standalone function, for the case that we want to browse url in a seperate window of *w3m* mode.

<pre>
(defun ffap-w3m-other-window (url &optional new-session)
  "Browse url in w3m.
  If current frame has only one window, create a new window and browse the webpage"
  (interactive (progn
                 (require 'browse-url)
                 (browse-url-interactive-arg "Emacs-w3m URL: ")))
  (let ((w3m-pop-up-windows t))
    (if (one-window-p) (split-window))
    (other-window 1)
    (w3m-browse-url url new-session)))
</pre>

==Improving w3m-browse-*==

Some w3m-browse-* functions (e.g. w3m-browse-generic) rely on finding urls via browse-url-url-at-point, which in turn relies on (thing-at-point 'url). However, thing-at-point does not seem to find urls for w3m's links. That's because a w3m link contains the url in the w3m-href-anchor text property. I use the following piece of advice to make sure that browse-url finds w3m's own links.

<pre>
;; make browse-url-url-at-point use w3m links if they exist
(defadvice browse-url-url-at-point (after w3m-anchor-at-point activate)
	"Browse the url at point. If w3m-anchor finds a url, use it."
	(setq ad-return-value 
				(or
				 (w3m-anchor)
				 (ad-return-value))))
</pre>

-ghf

[:EmacsW3WithGmail]
==Working with Gmail==

To work with Gmail, w3m requires a one-line  [[https://productforums.google.com/forum/#!topic/gmail/EKJfMizvywY patch]].
After this, emacs-w3m works well with Gmail in Basic HTML mode.  In particular, compared e.g. with mu4e, new mail is seen instantaneously, without needing to be fetched first by e.g. offlineimap.


----
CategoryExternalUtilities
CategoryHypermedia
)
                (
